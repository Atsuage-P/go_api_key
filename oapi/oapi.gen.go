// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package oapi

import (
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// N400 defines model for 400.
type N400 struct {
	Message *string `json:"message,omitempty"`
}

// N401 defines model for 401.
type N401 struct {
	Message *string `json:"message,omitempty"`
}

// HelloRes defines model for HelloRes.
type HelloRes struct {
	Message *string `json:"message,omitempty"`
}

// NumberReq defines model for NumberReq.
type NumberReq struct {
	Num *int `json:"num,omitempty"`
}

// NumberRes defines model for NumberRes.
type NumberRes struct {
	Num *int `json:"num,omitempty"`
}

// DeleteNumberParams defines parameters for DeleteNumber.
type DeleteNumberParams struct {
	// XAPIKEY APIキー
	XAPIKEY string `json:"X-API-KEY"`
}

// PostNumberParams defines parameters for PostNumber.
type PostNumberParams struct {
	// XAPIKEY APIキー
	XAPIKEY string `json:"X-API-KEY"`
}

// DeleteNumberJSONRequestBody defines body for DeleteNumber for application/json ContentType.
type DeleteNumberJSONRequestBody = NumberReq

// PostNumberJSONRequestBody defines body for PostNumber for application/json ContentType.
type PostNumberJSONRequestBody = NumberReq

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /hello)
	GetHello(ctx echo.Context) error

	// (DELETE /number)
	DeleteNumber(ctx echo.Context, params DeleteNumberParams) error

	// (POST /number)
	PostNumber(ctx echo.Context, params PostNumberParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetHello converts echo context to params.
func (w *ServerInterfaceWrapper) GetHello(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetHello(ctx)
	return err
}

// DeleteNumber converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteNumber(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteNumberParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-API-KEY" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-API-KEY")]; found {
		var XAPIKEY string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-API-KEY, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-API-KEY", valueList[0], &XAPIKEY, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-API-KEY: %s", err))
		}

		params.XAPIKEY = XAPIKEY
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-API-KEY is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteNumber(ctx, params)
	return err
}

// PostNumber converts echo context to params.
func (w *ServerInterfaceWrapper) PostNumber(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostNumberParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-API-KEY" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-API-KEY")]; found {
		var XAPIKEY string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-API-KEY, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-API-KEY", valueList[0], &XAPIKEY, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-API-KEY: %s", err))
		}

		params.XAPIKEY = XAPIKEY
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-API-KEY is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostNumber(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/hello", wrapper.GetHello)
	router.DELETE(baseURL+"/number", wrapper.DeleteNumber)
	router.POST(baseURL+"/number", wrapper.PostNumber)

}
